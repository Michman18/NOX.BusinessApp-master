@page "/admininventory/CreateNewProduct"
@inject HttpClient http
@inject NavigationManager uriHelper


<h3>Nuevo Item</h3>

<div class="tabbable">
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" data-toggle="tab" href="#Item">Item</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-toggle="tab" href="#ItemConfig">ItemConfig</a>
        </li>
    </ul>
    <div class="tab-content">
        <div id="Item" class="tab-pane fade in active">
            <div class="row">
                <div class="col-md-4">
                    <form>
                        <div class="form-group">
                            <label for="ItemCode" class="control-label">Code</label>
                            <input for="ItemCode" class="form-control" @bind="@prod.ItemCode" />
                        </div>

                        <div class="form-group">
                            <label asp-for="ItemDescription" class="control-label">Description</label>
                            <input asp-for="ItemDescription" class="form-control" @bind="@prod.ItemDescription" />
                        </div>
                        <div class="form-group">
                            <label asp-for="SalePrice" class="control-label">Sale Price</label>
                            <input asp-for="SalePrice" class="form-control" @bind="@prod.SalePrice" />
                        </div>
                        <div class="form-group">
                            <button type="button" class="btn btn-primary" @onclick="@(async () => await CreateProduct())">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div id="ItemConfig" class="tab-pane">
            <div class="row">
                <div class="col-md-4">
                    <form>
                        <div class="form-group">
                            <label for="ItemCode" class="control-label">Code</label>
                            <input for="ItemCode" class="form-control" @bind="@prodConfig.ItemCode" />
                        </div>

                        <div class="form-group">
                            <label asp-for="ItemDescription" class="control-label">Description</label>
                            <input asp-for="ItemDescription" class="form-control" @bind="@prodConfig.Description" />
                        </div>
                        <div class="form-group">

                            <InputFile OnChange="HandleSelection" />
                            <p>@status</p>
                            @if (!string.IsNullOrEmpty(imageDataUri))
                            {
                                <img src="@imageDataUri" />
                            }
                        </div>
                        <div class="form-group">
                            <button type="button" class="btn btn-primary" @onclick="@(async () => await CreateProduct())">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

    @code {

        public int companyid { get; set; }
        public Item prod = new Item();
        public ItemConfig prodConfig = new ItemConfig();
        string status;
        string imageDataUri;
        public string ruta { get; set; }


        async Task CreateProduct()
        {
            prod.CompanyID = 1;
            await http.PostAsJsonAsync(businessApp.Data.AppSettings.AddressItemService + "/api/Item/post?companyid=1&body=" + JsonConvert.SerializeObject(prod), prod);
            await http.PostAsJsonAsync(businessApp.Data.AppSettings.AddressItemService + "/api/ItemConfig/post?companyid=1", prodConfig);
            uriHelper.NavigateTo("/admininventory");
        }

        async Task HandleSelection(BlazorInputFile.IFileListEntry[] files)
        {
            var file = files.FirstOrDefault();
            if (file != null)
            {
                var rawFile = files.FirstOrDefault();
                if (rawFile != null)
                {
                    // Load as an image file in memory
                    var format = "image/jpeg";
                    var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
                    var ms = new MemoryStream();
                    await imageFile.Data.CopyToAsync(ms);

                    // Make a data URL so we can display it
                    imageDataUri = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";

                    prodConfig.picture = ms.ToArray();

                    status = $"Carga Completa {ms.Length} bytes del archivo {imageFile.Name}";
                }
            }
        }
    }
