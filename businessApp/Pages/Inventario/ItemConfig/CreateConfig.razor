@page "/AdminConfig/CreateConfig"
@inject HttpClient http
@inject NavigationManager uriHelper




<h3>Nuevo Item Config</h3>

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="ItemCode" class="control-label">Code</label>
                <input for="ItemCode" class="form-control" @bind="@prod.ItemCode" />
            </div>

            <div class="form-group">
                <label asp-for="ItemDescription" class="control-label">Description</label>
                <input asp-for="ItemDescription" class="form-control" @bind="@prod.Description" />
            </div>
            <div class="form-group">
                
                <InputFile OnChange="HandleSelection" />
                <p>@status</p>
                @if (!string.IsNullOrEmpty(imageDataUri))
                {
                    <img src="@imageDataUri" />
                }
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="@(async () => await createConfig())">Save</button>
            </div>
        </form>
    </div>
</div>

@code {
    string status;
    string imageDataUri;
    public int companyid { get; set; }
    public ItemConfig prod = new ItemConfig();
    public string ruta { get; set; }



    async Task createConfig()
    {
        await http.PostAsJsonAsync(businessApp.Data.AppSettings.AddressItemService + "/api/ItemConfig/post?companyid=1", prod);
        uriHelper.NavigateTo("/AdminConfig");
    }

    async Task HandleSelection(BlazorInputFile.IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var rawFile = files.FirstOrDefault();
            if (rawFile != null)
            {
                // Load as an image file in memory
                var format = "image/jpeg";
                var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
                var ms = new MemoryStream();
                await imageFile.Data.CopyToAsync(ms);

                // Make a data URL so we can display it
                imageDataUri = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";

                prod.picture = ms.ToArray();

                status = $"Carga Completa {ms.Length} bytes del archivo {imageFile.Name}";
            }
        }
    }
}

